name: Continuous Integration  # Name of the workflow

# Trigger the workflow on push or pull request events
on: [push, pull_request]

jobs:
  build-and-debug:  # Job name
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    services:
      app:
        image: my-python-app  # Replace with your local image name
        ports:
          - 12345:12345  # Map port for accessing the application

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Build the Docker image
    - name: Build Docker image
      run: docker build -t my-python-app .  # Build the image

    # Step 3: Run the Docker container
    - name: Run Docker container
      run: |
        docker run --name app-container -d --rm -v ${PWD}:/app -p 12345:12345 my-python-app
        sleep 10  # Give it some time to start up and potentially hit a breakpoint

    # Step 4: Check for debugging session
    - name: Check for debugging session
      run: |
        if docker exec app-container pgrep -f "python ./debug.py"; then
          echo "Debugger has been activated due to an error."
          # Fetch and print the debugger logs
          docker exec app-container curl http://localhost:12345/debugger-logs
        else
          echo "No debugging session detected."
        fi

    # Step 5: Upload debugging logs if there was a failure
    - name: Upload debugging logs
      if: failure()  # Only run this step if the previous steps failed
      uses: actions/upload-artifact@v3
      with:
        name: debugging-logs  # Name of the artifact
        path: ./debugging-logs.txt  # Path to the log file to upload
