name: Continuous Integration  # Name of the workflow

on:
  push:  # Trigger the workflow on push events
    branches:
      - main  # Only run on the main branch
  pull_request:  # Trigger the workflow on pull request events
    branches:
      - main  # Only run for pull requests targeting the main branch

jobs:
  build-and-debug:  # Define a job named 'build-and-debug'
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
    - name: Checkout repository  # Step to check out the code
      uses: actions/checkout@v3  # Use the GitHub Actions checkout action

    - name: Build Docker image  # Step to build the Docker image
      run: docker build -t local-debug-image .  # Tag the image as 'local-debug-image'

    - name: Run Docker container  # Step to run the Docker container
      run: |
        # Run the container in detached mode, remove it automatically after stopping,
        # and mount the current workspace to /app in the container.
        docker run --name app-container -d --rm -v ${{ github.workspace }}:/app -p 12345:12345 local-debug-image
        sleep 10  # Allow time for the container to start and potentially hit a breakpoint

    - name: Check for debugging session  # Step to check if the debugger is activated
      run: |
        # Check if the Python debugger is running in the container
        if docker exec app-container pgrep -f "python ./debug.py"; then
          echo "Debugger has been activated due to an error."  # Notify if debugger is active
          # Here you would need to adapt how to fetch logs from your application
          # This assumes you have set up a mechanism to retrieve logs
        else
          echo "No debugging session detected."  # Notify if no debugger is found
        fi

    - name: Upload debugging logs  # Step to upload logs if there was a failure
      if: failure()  # Only upload logs if there's a failure in previous steps
      uses: actions/upload-artifact@v3  # Use the upload artifact action
      with:
        name: debugging-logs  # Name of the artifact for uploaded logs
        path: ./debugging-logs.txt  # Path to the log file to be uploaded
